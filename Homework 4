Task 1
// Write a function that takes a nested array and returns a flattened array.

function flatteredArr(arr) {
    let result = [];
    for (let i = 0; i < arr.length; i++) {
        if (Array.isArray(arr[i])) {
            result = result.concat(flatteredArr(arr[i]))
        } else {
            result.push(arr[i])
        }
    }
    return result;
}

Task 2
// Group By Property
// Write a function that groups an array of objects by a specific property.

function groupBy (arr, prop) {
    const result = {};
    for (let elem of arr) {
        if (!result[elem[prop]]) {
            result[elem[prop]] = [];
        }
        result[elem[prop]].push(elem)
    }
    return result;
}

Task 3
// Write a function that merges two arrays in a zipper-like fashion

function zipp (arr1, arr2) {
    const result = [];
    for (let i = 0; i < arr1.length; i++) {
        if (i < arr1.length) {
            result.push(arr1[i])
        }
        if (i < arr2.length) {
            result.push(arr2[i])
        }
    }
    return result;
}

Task 4
// Write a function that divides an array into chunks of a specified size.

function chunkArray(arr) {
    let size = 3;
    let result = [];
    let chunk = [];

    arr.forEach((item, index) => {
        chunk.push(item);
        if (chunk.length === size || index === arr.length - 1) {
            result.push(chunk);
            chunk = [];
        }
    });

    return result;
}

Task 5
// Intersection of Arrays
// Write a function that returns the intersection of two arrays.

function intersection(arr1, arr2) {
    return arr1.filter(elem => arr2.includes(elem));
}

Task 6
// Find Duplicates
// Write a function that finds all duplicates in an array.

function findDuplicates(arr) {
    const duplicates = [];

    for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
            if (arr[i] === arr[j] && !duplicates.includes(arr[i])) {
                duplicates.push(arr[i]);
                break;
            }
        }
    }

    return duplicates;
}

Task 8
// Count Occurrences
// Write a function that counts the occurrences of each element in an array and returns an object
// with the element as the key and the count as the value.

function fromArrayToObjectList (arr) {
    const result = {};
    for (let elem of arr) {
        if (!result.hasOwnProperty(elem)) {
            result[elem] = 1;
        } else {
            result[elem]++
        }
    }
    return result
}

Task 9
// Calculate Factorial
// Write a function that calculates the factorial of a number using reduce.

function factorial (n) {
    if (n <= 0) {
        return 1
    }
    
    const numbers = [];
    for (let i = 1; i <= n; i++) {
        numbers.push(i)
    }
     return result = numbers.reduce((accum, elem) => accum * elem, 1); 
}   

Task 10
// Find Missing Number
// Write a function that finds the missing number in an array of consecutive numbers using reduce.

function findMissingNumber (arr) {
    const missingNumber = arr.sort((a, b) => a - b).reduce((accum, elem, index) => {
        if (index > 0) {
            let previous = arr[index - 1];
            for (let i = previous + 1; i < elem; i++) {
                accum += i;
            }
        }
        return accum
    }, [])
    return missingNumber
}
